// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Example.Endpoint.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class ExampleData : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Technical key of the data</summary>
        public long? TechnicalKey { get; set; }
        /// <summary>Start date</summary>
        public Date? ValidFrom { get; set; }
        /// <summary>End date</summary>
        public Date? ValidUntil { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Example.Endpoint.Models.ExampleData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Example.Endpoint.Models.ExampleData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Example.Endpoint.Models.ExampleData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "technicalKey", n => { TechnicalKey = n.GetLongValue(); } },
                { "validFrom", n => { ValidFrom = n.GetDateValue(); } },
                { "validUntil", n => { ValidUntil = n.GetDateValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("technicalKey", TechnicalKey);
            writer.WriteDateValue("validFrom", ValidFrom);
            writer.WriteDateValue("validUntil", ValidUntil);
        }
    }
}
#pragma warning restore CS0618
